Day wise:
1. Introduction to c, tokens, how to run c programming in vs code, compile c program in vs code, and execution
2. variables, data types and operators
3. control statements 
4. looping statements
5. nested loops, patterns
6. functions, types and recursive functions, creating own header files
7. array
8. pointers
9. searching and sorting algorithms
10. problem execution


Day1:
C workshop:
	Programming:
		to give solution for requirement/ issue/ problem
	software>> solution

	System software/ hardware controller:
		Operating Systems
		Drivers
		Compilers
		frameworks
		gaming consoles
		firmware
		

	application software:
		eg: insta, fb, WhatsApp, ms word, gmail,
		desktop applications: games, vlc, bgmi, WhatsApp

		Web application: gmail, amazon, youtube, twitter, insta, fb,....

		Mobile applications: insta, fb, gmail, game, spotify 

		IoT applications: home automation, industry automation
		

tools:
turbo 
vs code
mingw
code blocks
eclipse
online gdb compiler

		
coding:
	data :
		format and size
			variables using data types: int, float, double, char
	Operation



https://github.com/razzaksr/MEC-2024-C-A


Task 1:
Team A: Purchase Order:
	customerName, customerAddress, itemName, modeOfPurchase
	itemPrice, contactNumber
Team B: EB customer care:
	consumerName, consumerNumber, contactNumber, issue, email
Team C: Voter ID application:
	applicantName, constituencyNumber, applicantAddress, contactNumber, age, email

Task 2:
Team A: SIP
Team B: SWP
Team C: Housing loan with floating interest

Operators

Day2:
Control statements:
if:

if(){}

if(){}else{}

if(){}else if(){}......else{}

if(){if(){}}

switch


Loop statements:
repeating the process
reduce complexity by avoid the same repeated lines 

loop:
initialization>> start	>> multiple initialization
condition	> end	>> single/multiple
iteration		> step up>> linear/ dynamic

//init
while(condition){
// logic
// iter
}


//init
do{
// logic
// iter
}while(condition);

for(init;cond;iter){
// logic
}


task:
find the maximum value in the series of 20 inputs using loop

fMax, sMax
110         99
90 110 67 12 65 34 10 78 99
                                              c
Day3:
Nested Loop:

loop1: init, cond,iter
	logic of loop1
	loop2: init, vond, iter
		logic of loop2


number=11

1 X 2 = (1*2)>> 2
2 X 2 =(2*2)>> 4
3 X 2 =(3*2)>> 6
.
.
.
10 X 2=(10*2)>> 20

	

to compile:
alt+f9

to run:
ctrl+f9

to see the output:
alt+f5


#include<stdio.h>

void main(){
    int coach=1, ticket=0;
    while(coach<=4){
        printf("\n%d coach of the day arrived at the bay",
        coach);
        int time=1, seats=20;
        while(time<=10&&seats>0){
            printf("\nEnter the number of seats required ");
            scanf("%d",&ticket);
            if(ticket<=seats){
                printf("\n%d of seats are booked @ %d",
                ticket,coach);
                seats-=ticket;
            }
            else{
                printf("\n%d seats are available %d",
                seats,coach);
            }
            time++;
        }
        coach++;
 
   }
}

Day4:
#####
#####
#####
#####
#####

// patterns
1.
#####
####
###
##
#

2.
#####
  ####
    ###
      ##
        #

3.
#
##
###
####
#####

4.
        #
      ##
    ###
  ####
#####

5.
    #
  ###
#####


6.
#####
  ###
    #


Pilers of C programming:

Functions
Arrays
Pointers
User defined types
Files


Functions:
	Logic of code to be executed when the call made

function types:
	param and return
	param and no return
	no param and no return
	no param and return


1. write the definition of the function
2. then make a call in the main


cprogram.c

compile the code:
gcc filename.c

>> a.exe

run the code:
./a.exe


day 5:
recursive functions:

function1(){
....
...logic
function1();
}


main(){
function1();
}


Using recursion:
SIP
Loan interest calculation
multiplication tables
factorial
Fibonacci
no of debits in recent transactions



day 6:
Array:
Storage logic where to keep multiple data under one reference/ variable.

to reduce time complexity

double package = 8.9,12.5,1.2;

syntax:
datatype var_name[size];
datatype var_name[size]={v1,v2,v3,v4,.......};

index>> 0 ... Size-1

size=10
index>> 0....9



char myName[20]="Razak Mohamed S";
char myName[20]={'R','a','z','a','k',' ','M','o','h','a','m','e','d',' ','S'};
double salary[8]={8.9,12.5,1.2,8.9,3.4,10.4,22.5,9.2};



Array:
Stack Implementation
Queue implementation
LinkedList implementation
Linear search
Binary search
Array as function parameter and return type
CRUD Operations using functions
Sorting: selection, quick sort
No of debits in recent transactions


day 7:
Pointers:
int alpha=12;

datatype *variable;


pointers to array
pointers to the function
pointers to user defined data type: struct, union


i			    i
0,1, 2, 3,4, 5, 6,  7
7,9,10,1,3,10,56,2	>> hai

hai[0]>> 7 >> read


7>> 0	>> search

10>>2
56>> 6
3>> 4


sorting array:

original array:
  0, 1  ,2  ,3  ,4  ,5,  6
78,12,56,90,65,22,17

selection sort:
select 0>> compare>> 1,2,3,4,5,6 
78>> 12>> 0 and 1
12,78,56,90,65,22,17
12>> 56>> 0 and 2
12>> 90>> 0 and 3
12>> 65>> 0 and 4
12>> 22>> 0 and 5
12>> 17>> 0 and 6

12,78,56,90,65,22,17

select 1>> compare>> 2,3,4,5,6
78>>56>> 1 and 2
12,56,78,90,65,22,17
56>>90>> 1 and 3
56>>65>> 1 and 4
56>>22>> 1 and 5
12,22,78,90,65,56,17
22>>17>> 1 and 6
12,17,78,90,65,56,22

select 2>> compare>> 3,4,5,6

select 3>> compare>> 4,5,6
select 4>> compare>> 5,6
select 5>> compare>> 6


sort ascending:
12,17,22,56,65,78,90

sort descending:
90,78,65,56,22,17,12
******
  *****
    ****
      ***
        **
          *


78,12,56,90,65,22,17>> each

*each>> *(each+0)
*(each+1)>> 12
*(each+2)>> 56
*(each+3)>>90


day 8:
Binary search:
can be done on sorted array

1. find mid index value: start+(end-2)/2
2. check mid is what we looking for
3. search backward if mid is > looking for:
	between start and mid-1
4. search forward id mid< looking for
	between mid+1 and end

  0  1    2  3   4    5   6
12,17,22,56,65,78,90>> sorted array

65
>> mid >> start+(end-start)/2>> 3
>> mid>> 0+(6-0)/2 >> 3

56==65
56>65
56<65 >> range: start:4, end:6

find mid>> 4+(6-4)/2>> 5
78==65
78>65: range: start:4, end:4

find mid>> 4+(4-4)/2>> 4
65==65


0    1   2   3   4   5    6
12,17,22,56,65,78,90>> sorted array


22
range: 0 to 6
mid>> 3

range: 0 to 2
mid>> 1

range: 2 to 2
mid>> 2

Stack Implementation:
day 9:
Question 1:
consider the following array and find the sum of even position
[3,4,12,90,41,10,30]
Output: 86

Question 2:
consider the following array and perform update operation by reducing 20rs those values between 2000 and 5000
[12000,4000,3500,8000,9800,2200]
Output:[12000,3980,3480,8000,9800,2180]

Question 3:
consider the following array size of 10 contains amount of cheque leaf's which has to be cleared by the bank now, however due to priority filter the amount which are less than 20000's
eg: 
input1: 7800,21000,43000,45000,43100,32000,12000
Output1: 7800,12000
input 2: 5600,8700,3500,43000,28954,700,59000,3000
Output 2: 5600, 8700, 3500, 700, 300

day 10:
String: char array

%s	>> input/print values of char array in one statement

input functions:
scanf
gets
fgets

output:
printf
puts
fputs



String.h   functions
strcpy>> assign value to the string
strcat>> concat
strcmp>> comparison based on ascii
strlwr>> convert into lower case
strupr>> convert into upper case
strlen>> length of character not size

int myData[20];	>> 0....19
char myName[20];>> 0....19>> '\0'


String sort
print chart:

$$ ##
## $#
$$ $#
## ##
## $$

String/ Single dimension char array:
char *alpha;

String array/ multi dimension char array
char *beta[5];/ char beta[5][30];

multi dimensional int array
int cosmo[5][10];





find and replace characters in string

find string's and print from a multi dimensional string array, only if their start letter is any of vowels>> a,e,i,o,u
Eg:
it, is, not, obvious, to, find, python, using ,for, app, development
output:
it, is, obvious, using, app





Razak Mohamed Shahul Hameed


